{
    "apiVersion": 62.0,
    "body": "/**\n * @description Demonstrates how to make various types of SOQL Calls\n * Including multi-object queries, and Aggregate queries\n * @group Data Recipes\n */\npublic with sharing class SOQLRecipes {\n    /**\n     * @description Demonstrates the proper way to query accounts with SOQL\n     *   keeping FLS and CRUD in account.\n     * @return list<Account>\n     **/\n    public static list<Account> querySingleObject() {\n        List<Account> accounts = new List<Account>();\n        if (CanTheUser.read(new Account())) {\n            accounts = [\n                SELECT Name, ShippingStreet, ShippingCity\n                FROM Account\n                WITH USER_MODE\n            ];\n        }\n        return accounts;\n    }\n\n    /**\n     * @description Demonstrates how to loop over a SOQL query\n     * @return integer\n     **/\n    public static integer queryMassiveNumberOfRecordsReturningCount() {\n        Integer count = 0;\n        /**\n         * You'll see this pattern, called a SQOL for loop used\n         * whenever you're iterating over a massive number of rows.\n         * Doing a SOQL for loop like this helps you avoid hitting\n         * Heap limits. Find out more here:\n         * https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/langCon_apex_loops_for_SOQL.htm\n         */\n\n        for (Account acct : [SELECT Name FROM Account WITH USER_MODE]) {\n            count++;\n        }\n        return count;\n    }\n\n    /**\n     * @description Demonstrates how to use a WHERE clause in a SOQL Query\n     * @return List<Account>\n     **/\n    public static List<Account> getFilteredList() {\n        return [\n            SELECT Name\n            FROM Account\n            WHERE ShippingCountry = 'UK'\n            WITH USER_MODE\n        ];\n    }\n\n    /**\n     * @description Demonstrates how to use a complex WHERE clause in a SOQL query\n     * @return List<Account>\n     **/\n    public static List<Account> getComplexFilteredList() {\n        return [\n            SELECT Name\n            FROM Account\n            WHERE\n                ShippingCountry = 'US'\n                AND ShippingState = 'IN'\n                AND (Industry = 'Fast Food - made whole'\n                OR Industry = 'Slow Food - Made quickly')\n            WITH USER_MODE\n        ];\n    }\n\n    /**\n     * @description Demonstrates how to use the LIMIT clause in a SOQL statement\n     * @return List<Account>\n     **/\n    public static List<Account> getSpecificNumberOfResults() {\n        //LIMIT clause\n        return [\n            SELECT name\n            FROM Account\n            WITH USER_MODE\n            ORDER BY Industry DESC\n            LIMIT 10\n        ];\n    }\n\n    /**\n     * @description Demonstrates how to use a bound variable to define the LIMIT\n     * @author Kevin Poorman (kPoorman@salesforce.com) | 08-20-2020\n     * @param wantedNumberOfRows the number of rows desired\n     * @return List<Account>\n     **/\n    public static List<Account> getFirstXResults(Integer wantedNumberOfRows) {\n        return [\n            SELECT name\n            FROM Account\n            WITH USER_MODE\n            ORDER BY Industry DESC\n            LIMIT :wantedNumberOfRows\n        ];\n    }\n\n    /**\n     * @description Demonstrates how to use a bound variable in a WHERE clause\n     * @param state String representing a US State code (AK, KS, etc.)\n     * @return List<Account>\n     **/\n    public static List<Account> getAccountsInState(String state) {\n        return [\n            SELECT Name\n            FROM Account\n            WHERE ShippingState = :state\n            WITH USER_MODE\n        ];\n    }\n\n    /**\n     * @description Demonstrates how to get a limited number of results with a given offset\n     *   Ie: get the second set of 10 records.\n     * @return List<Account>\n     **/\n    public static List<Account> getSecond10Accounts() {\n        return [\n            SELECT id\n            FROM Account\n            WITH USER_MODE\n            ORDER BY Industry DESC\n            LIMIT 10\n            OFFSET 10\n        ];\n    }\n\n    /**\n     * @description Demonstrates how to query an object, as well as it's related child objects\n     * @return List<Account>\n     **/\n    public static List<Account> getContactsAndAccounts() {\n        return [\n            SELECT Name, (SELECT Name, AccountId FROM Contacts)\n            FROM Account\n            WITH USER_MODE\n        ];\n    }\n\n    /**\n     * @description Demonstrates how to query fields from a parent object through the relationship field\n     * @return List<Contact>\n     **/\n    public static List<Contact> getParentDetailsForChild() {\n        return [\n            SELECT Id, Name, Email, account.Name, account.ShippingState\n            FROM Contact\n            WHERE account.ShippingState = 'KS'\n            WITH USER_MODE\n        ];\n    }\n\n    /**\n     * @description Demonstrates how to write a query that pulls information from two parent objects through a junction object\n     * @return List<Junction__c>\n     **/\n    public static List<Junction__c> getDetailsFromBothParents() {\n        return [\n            SELECT Id, parent1__r.Name, parent2__r.Name\n            FROM Junction__c\n            WITH USER_MODE\n        ];\n    }\n\n    /**\n     * @description demonstrates how to use aggregate methods, like Sum() or Count() in a SOQL query\n     *   This example generates the sum of opportunities associated with a specified Account\n     * @param accountId an AccountId\n     * @return Double\n     **/\n    public static Double getSumOfOpportunities(Id accountId) {\n        AggregateResult[] groupedResults = [\n            SELECT SUM(Amount) total\n            FROM Opportunity\n            WHERE accountId = :accountId\n            WITH USER_MODE\n        ];\n        return (double) groupedResults[0].get('total');\n    }\n}",
    "groupName": "Data Recipes",
    "lengthWithoutComments": 3265,
    "name": "SOQLRecipes"
}
